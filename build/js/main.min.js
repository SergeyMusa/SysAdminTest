// import { add } from './math.js';
// console.log(add(1, 2));
// !!!!!!!!!!!! не работает импорт впринципе и лодаш в частности
// import _ from "lodash";
// console.log(_.isEqual(1, true));
"use strict";
"use strict";

var iqFunction = function iqFunction() {
  // return 'index'
  console.log("!!!!!!!!!!!!!!!!!!"); // setTimeout(() => {
  //     console.log(Object.keys(answerList).length);
  // }, 5000)
}; // просто прикольно after резобрать fun 
//function A(){$c=0;foreach($_SESSION['test']['objects'] as &$o){if($o['type']==1&&isset($o['an'])&&$o['an'])$c++;}return $c;}
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ниже набор разных функций, писал походу, но потом не понадобились
// function sortStrArr(arr) { //сотрируем строковый массив
//     arr.sort();
//     return arr;
// }
// function sortNumArr(arr) { //сотрируем числовой массив
//     arr.sort(compareNum);
//     function compareNum (a, b) {
//         return a - b;
//     }
//     return arr;
// }
// function lengthObj(Obj) { //old`s длина объекта
//     let counter = 0;
//     for (let key in Obj) {
//         counter ++;
//     }
//     return counter;
// }
// function lengthObj2(Obj) {   //длина объекта
//     return Object.keys(Obj).length;
// }
// function contains(arr, elem) {   //поиск элемента в массиве
//     return arr.find((i) => i === elem) != -1;
// }
// const {mm1} = myObject.n5; // get block from obj
// Object.keys(myObject).map(function (key, index) {
//     myObject[key] *= 2;
// });
// myArr = Object.values(myObject); // этой строкой преобразуем объект в массив
// работает вывод всего содержимого localStorage
// const LS = { ...localStorage };
// console.log(LS);
//---------------
// localStorage.setItem(i, '0');
//   localStorage.getItem(j)
"use strict";

// скрипты для страницы тест
// !!!!!!!!!!!!!! пока не работает импорт, делать по другому
// const gulpLodash = require('gulp-lodash');
//-
// const { keys } = require("lodash");
//-
// подключаем библиотеку Лодаш
// const lodash = require('lodash')
// console.log(gulpLodash.isEqual(1, 2));
// gulpLodash('Rainbow');
// const {
//     Button
// } = require("bootstrap");
//do on start
// console.log('START');
var Anketa = {
  user: 'Ivan',
  //jokeBeginName
  org: 'Home',
  status: 0,
  //0-стр открыта, 1-тест начали, 2-тест закончили
  timeBegin: 0,
  //время начала теста
  timeEnd: 0,
  //время закончил тест
  result: '0',
  //процент правльных ответов и резюме
  equal: '',
  sysAdminTest: '',
  // timeBeginTest: 0,
  checkboxClick: document.querySelector("#flexSwitchCheckDefault"),
  header: document.querySelector("header"),
  section: document.querySelector("#top"),
  checkerAutorise: document.querySelector('#checkerAutorise'),
  checkerOneAll: document.querySelector('#checkerOneAll'),
  btnCheckTest: document.querySelector('.btn-success'),
  //btnCheckTest
  btnStartTest: document.querySelector('#btnStartTest'),
  inputUserOrg: document.querySelector('#inputUserOrg'),
  inputUserName: document.querySelector('#inputUserName'),
  editTop: function editTop() {
    console.log("editTop");
  },
  // ПЕРЕЛЕДАТЬ
  populateHeader: function populateHeader(obj) {
    // вывод сформированого заголовка
    var createH1 = document.querySelector(".result"); // h1.result

    var user = document.createElement("p");
    createH1.textContent = obj.jTestSysadmin;
    Anketa.header.appendChild(createH1);
    user.textContent = "\u0422\u0435\u0441\u0442 \u043F\u0440\u043E\u0448\u0451\u043B: ".concat(localStorage.getItem('user'), " \u0438\u0437 \u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u0438: \n            ").concat(localStorage.getItem('org'), ", \u043F\u043E\u043F\u044B\u0442\u043A\u0430 \u2116").concat(localStorage.getItem('count') || '0');
    Anketa.header.appendChild(user);
  },
  doResult: function doResult() {
    console.log("Result");
  }
}; //----

var answerList = {},
    answerListTrue = {}; // const
// answers = {
//     answerList: {},
//     answerListTrue: {}
// };
//------------------------------------------
// userButtonTest.disabled = false;
// //  тренировочный объект
// const myObject = {
//     'n1': '1',
//     'n2': 12,
//     'n3': 3,
//     n4: 4,
//     n5: {
//         mm1: '1001',
//         mm2: '1012',
//         mm3: 1003
//     }
// }; // в json 'numberTest'
// let myArray = [1, 10, 2, 14, 20, 44, 4, 7];
//  загрузка JSON
//-------------------------------------------------------------------------------    
// request.onload = function () {

var requestURL = "./json/test.json",
    request = new XMLHttpRequest();
request.open("GET", requestURL);
request.responseType = "json";
request.send(); //=====NEW Promise=======================================================

var elResult = document.querySelector('#result');

function loadJson() {
  console.log("loadJson...");
  elResult.textContent = 'Идет загрузка данных...';
  var promise = new Promise(function (resolve, reject) {
    var requestURL = "./json/test.json",
        request = new XMLHttpRequest();
    request.open("GET", requestURL);
    request.responseType = "json";
    request.send();

    if (res === 'ok') {
      resolve();
    }
  });
  promise.then(function (resolve) {
    console.log("\u0417\u0430\u0433\u0440\u0443\u0437\u043A\u0430 \u0443\u0441\u043F\u0435\u0448\u043D\u043E \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0430 - ".concat(resolve));
  });
  promise["catch"](function (error) {
    console.log(111, error); // elResult.textContent += `Ошибка загрузки`;
  });
  promise["finally"](function () {
    console.log("..."); // isProcess = false;
  });
  return promise;
}

; // -------------------------------------------------------------------------------------

Anketa.checkerAutorise.addEventListener('click', function (event) {
  togleInput();
  event.target.remove(); // console.log(Anketa.checkerAutorise);

  Anketa.timeBegin = getTime(); // console.log("timeBeginTest_"+timeBeginTest);
  // Anketa.status = 1;
});
Anketa.checkerOneAll.addEventListener('click', function (event) {
  var labelOneAll = document.getElementById('labelOneAll');

  if (Anketa.checkerOneAll.checked === true) {
    labelOneAll.innerHTML = 'вопросы все подряд или <b>по одному</b>';
  } else {
    labelOneAll.innerHTML = 'вопросы <b>все подряд</b> или по одному';
  }
});

function togleInput() {
  // thing.classlist.toggle.disabled ? true: false;
  // let isHidden = thing.classlist.disabled; 
  // console.log('hide ', isHidden);
  var alertRed = document.getElementById('autorization');

  if (Anketa.checkboxClick.checked == false) {
    Anketa.inputUserName.setAttribute('disabled', true);
    Anketa.inputUserOrg.setAttribute('disabled', true);
    Anketa.btnStartTest.disabled = true;
  } else {
    Anketa.inputUserName.disabled = false;
    Anketa.inputUserOrg.disabled = false;
    Anketa.btnStartTest.disabled = false;
    alertRed.hidden = true;
    Anketa.checkerAutorise.style.color = "black";
  }

  Anketa.checkboxClick.checked = false;
}

Anketa.btnStartTest.addEventListener('click', function (event) {
  //const doStartTest = () => {
  var randomUser = randomInteger(100, 999); // выбираем имя по умолчанию если не введено что-то другое и заносим в локал сторадж

  inputUserName.placeholder = inputUserName.placeholder + "_" + randomUser;
  Anketa.user = Anketa.inputUserName.placeholder;
  Anketa.org = Anketa.inputUserOrg.placeholder;

  if (Anketa.inputUserName.value !== "" && Anketa.inputUserOrg.value !== "") {
    // userName.placeholder = "Сыкло )";
    Anketa.user = "\"".concat(Anketa.inputUserName.value, "\"");
    Anketa.org = "\"".concat(Anketa.inputUserOrg.value, "\"");
  }

  localStorage.setItem('user', Anketa.user);
  localStorage.setItem('org', Anketa.org); // localStorage.setItem('timer', timer);

  togleInput();
  Anketa.status = 1; // btnStartTest.disabled = true;
  // btnCheckTest.disabled = false;
  // event.target.remove();

  Anketa.sysAdminTest = request.response;
  Anketa.checkerOneAll.checked ? doTest(Anketa.sysAdminTest, 'One') : doTest(Anketa.sysAdminTest, 'All');
});
Anketa.btnCheckTest.addEventListener('click', function () {
  //userButtonTest //userButtonTest
  Anketa.btnCheckTest.disabled = true;
  Anketa.status = 2;
  Anketa.sysAdminTest.survey.map(function (item) {
    //sysAdminTest["survey"].map(item => {
    answerListTrue[item.numberTest] = item.right;
  }); // delete answerListTrue[0]; //answerListTrue["0"] // убираем парковочный ответ ??

  console.log("answerList____: ", answerList);
  console.log('answerListTrue: ', answerListTrue);
  Anketa.equal = isEqual(answerList, answerListTrue);
  console.log('isEqual_', Anketa.equal); // console.log('al=', Object.keys(answerList).length);

  testCount();
  getTime();
});

var onChangeButtonValue = function onChangeButtonValue(num, value) {
  return answerList[num] = value;
}; // function onChangeButtonValue(num, value) {
//     answerList[num] = value;
// }
// function lengthObj2(Obj) {
//     return Object.keys(Obj).length;
// }
// function onChangeButtonValue2(num, value) {
//     // answerList[num] = value;
//     console.log(answerList[num] = value);
// }
//  перенести в начало ? ------------------------------


var randomQuestions = 0,
    questions = '';

function randomQuestion(obj) {
  questions = obj.survey;
  var testNumberArr = []; // get all number test in Arr & randomize

  for (var key in questions) {
    // for (let i = 1; i < questions.length; i++) { 
    testNumberArr.push(questions[key].numberTest);
  }

  testNumberArr.shift(); //  del parking 0

  randomQuestions = testNumberArr;

  var compareNum = function compareNum(a, b) {
    return a - b;
  };

  randomQuestions.sort(compareNum); // check break in number question json, else err
  // function compareNum(a, b) {
  //     return a - b;
  // }

  if (randomQuestions[randomQuestions.length - 1] !== randomQuestions.length) {
    alert("произошла ошибка, свяжитесь с администратором admin@mail.net");
    console.log("ошибка в порядке номеров json");
    console.log("\u043E\u0436\u0438\u0434\u0430\u043B\u0441\u044F \u043D\u043E\u043C\u0435\u0440:".concat(randomQuestions.length, ", \u0430 \u043F\u043E\u043B\u0443\u0447\u0435\u043D:").concat(randomQuestions[randomQuestions.length - 1]));
  }

  randomArr(testNumberArr); // рандом в первый раз раз запускать пустой, второй рабочий

  randomArr(testNumberArr); // console.log(testNumberArr);

  return testNumberArr;
}

function doTest(obj, how) {
  // формирование и вывод прямого теста
  randomQuestion(obj); // формируем случайную последовательность наших вопросов

  console.log(randomQuestions);
  var myArticle = document.createElement("article"),
      testNumber = document.createElement("h2"),
      testQuestion = document.createElement("h5"),
      testVariants = document.createElement("p"),
      testAnswer = document.createElement("p"); // let position = document.querySelector('#top');

  var variantAnswer = '';
  myArticle.setAttribute("class", "test");
  var questionList = document.createElement("div");

  if (how === 'All') {
    // чекер выводить по одному или все вопросы сразу 
    for (var i = 0; i < randomQuestions.length; i++) {
      var title = document.createElement("div");
      variantAnswer = questions[randomQuestions[i]].answers; // console.log("variantAnswer_"+i+"-"+variantAnswer);

      testNumber.textContent = i + 1; //отображаемый number

      testQuestion.textContent = "\u0412\u043E\u043F\u0440\u043E\u0441: ".concat(questions[randomQuestions[i]].question);
      testVariants.textContent = "\u0412\u0430\u0440\u0438\u0430\u043D\u0442\u044B \u043E\u0442\u0432\u0435\u0442\u043E\u0432: ".concat(questions[randomQuestions[i]].answers);
      testAnswer.textContent = "\u041F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0439 \u043E\u0442\u0432\u0435\u0442: ".concat(questions[randomQuestions[i]].right, " - ").concat(questions[randomQuestions[i]].justification);
      title.innerHTML = "<h3> ".concat(testNumber.textContent, " </h3> \n <h4>").concat(testQuestion.textContent, " </h4>");
      myArticle.appendChild(title);
      showQuestion(randomQuestions[i]);
    } // -------do there-------

  } else {
    //(how === 'One')
    var _i = 0; // variantAnswer = questions[x[i]].answers;
    // testNumber.textContent = i + 1; //отображаемый number
    // testQuestion.textContent = "Вопрос: " + questions[x[i]].question;
    // testVariants.textContent = "Варианты ответов: " + questions[x[i]].answers;
    //     // testAnswer.textContent =   "Правильный ответ: " + questions[x[i]].right + " - " + questions[x[i]].justification;
    // testAnswer.textContent =
    //     "Правильный ответ: " +
    //     questions[x[i]].right +
    //     " - " +
    //     questions[x[i]].justification;
    // showQuestion(x[i]);
    // for (let i = 0; i < x.length; i++) {
    //     const answerButton = document.createElement("div");
    //     answerButton.innerHTML = `
    //     <button type='button' onClick='onChangeButtonValue2(${x[i]})' >${i+1}</button>
    //     `;
    //     answers.answerList.appendChild(answerButton);
    // }
  }

  function showQuestion(numberQuestion) {
    for (var numberAnswer = 1; numberAnswer < variantAnswer.length; numberAnswer++) {
      var radioAnswer = document.createElement("div");
      radioAnswer.innerHTML = "\n            <input type='radio' name='answer".concat(numberQuestion, "' value='").concat(numberAnswer, "' id=\"").concat(numberAnswer).concat(numberQuestion, "\" onClick='onChangeButtonValue(").concat(numberQuestion, ", ").concat(numberAnswer, ")'> \n            <label for=\"").concat(numberAnswer).concat(numberQuestion, "\">").concat(variantAnswer[numberAnswer], "</label>"); // `<input type='radio' name='answer${x[i]}' value='${j}' onClick='onChangeButtonValue(${x[i]}, ${j})'> <label for='${j}'>${variantAnswer[j]}</label>`;

      questionList.appendChild(radioAnswer);
      myArticle.appendChild(radioAnswer); //  answers.answerList[i] = 0;
    }

    Anketa.section.appendChild(myArticle);
  }
} //!!!!!!!!!!!!!!!!!!!!!!!! что за херня с именами ???????????????????????


function isEqual(answerListE, answerListTrueE) {
  // сравнение двух объектов с подсчетом процентов
  Anketa.populateHeader(Anketa.sysAdminTest);
  delete answerListTrueE[0]; // answerListTrueE.shift;

  var props1 = Object.getOwnPropertyNames(answerListE);
  var props2 = Object.getOwnPropertyNames(answerListTrueE);
  var evaluation = 0;
  var evaluationPoor = 49;
  var evaluationGood = 70;
  var evaluationFine = 90;
  var answerAmount = 0;
  var answerRight = 0; // console.log("1."+answerListE +'-'+answerListTrueE);
  // console.log("2."+answerList+'-'+answerListTrue);

  if (props1.length !== props2.length) {
    console.log(props1.length + '-' + props2.length);
    console.log('что-то пошло не так, ответов и тестов разное кол-во'); // 

    alert("вы ответили не на все вопросы");
    return false;
  }

  for (var i = 0; i < props2.length; i += 1) {
    var count = props1[i];

    if (answerListE[count] === answerListTrueE[count]) {
      answerRight++;
    }

    answerAmount++;
  }

  evaluation = Math.round(answerRight * 100 / answerAmount);
  var itog = evaluation < evaluationPoor ? 'You stupid, go out!!!' : evaluation < evaluationGood ? 'так-себе результат' : evaluation < evaluationFine ? 'хорошие знания' : 'поздравляю, ты спец'; //!!!!!!!!!!!!!!!!!
  // for (let [key, value] of answerRight) {
  // console.log(i);
  // };
  // const 

  Anketa.section = document.querySelector("#bottom"); // const testRez = document. ("h5");

  var delEl = document.querySelector('h5');
  delEl.remove();
  var testRez = document.createElement("h5"); //const testTexst = document.createTextNode("Ответ:, rez");

  testRez.textContent = "\u041F\u0440\u0430\u0432\u0438\u043B\u044C\u043D\u044B\u0445 \u043E\u0442\u0432\u0435\u0442\u043E\u0432: ".concat(answerRight, ", \u0438\u0437 ").concat(answerAmount, ", \u044D\u0442\u043E ").concat(evaluation, "%, \n\n\u0440\u0435\u0437\u044E\u043C\u0435: ").concat(itog); // console.log(answerAmount, answerRight, evaluation, '%', itog);

  Anketa.section.appendChild(testRez); // section.innerHTML =

  return itog; // true;
} //====================================
// THE END
"use strict";

// надо сделать проверки теста:
// 1- соответствие имени ?
// 2- затраченое время
// 2-2 соответствие времени на компе и в тесте
// 2-2-3 получить место где комп по айпи и выяснить местное время
// 3- сколько раз запускали тесте
// 3-2 отсутствие коррекции локалСторадж
// 9- защита оз изменения кода на странице ?
// таймер
// добавить оценку теста +-
// средний результат
// печать результата или отправить на почту
// сделать своою выборку тестов
// форма отзывов: ошибки или предложения
// id теста, показывает количество вызовов за день(чтобы не откатывали назад - не жульничали)
var checkTestRight = function checkTestRight() {
  console.log('Right');
}; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//
// правильные ответы можно выводить все вместе внизу
// потом сделать - перерисовать тест с выделением правильный
// 'use strict';
// const fs = require('fs');
// const loadJSON = (filepath) => {
//   return new Promise((resolve, reject) => {
//     fs.readFile(filepath, 'utf8', (err, content) => {
//       if(err) {
//         reject(err)
//       } else {
//         try {
//           resolve(JSON.parse(content));
//         } catch(err) {
//           reject(err)
//         }
//       }
//     })
//   });
// }
// loadJSON(`${__dirname}/pareto.json`)
// .then(console.log)
// .catch(console.log);
// function getJSON(url) {
//     return new Promise(function(resolve, reject) {
//         const req = https.get(url, res => {
//             let json = '';
//             res.on('data', function(chunk) { json += chunk; });
//             res.on('end', function() { resolve(JSON.parse(json)); });
//         });
//         req.on('error', function(err) { console.log(err); });
//     });
// };
// const weather = () => {
//     getJSON('yourURL')
//         .then((data) => console.log(data))
//         .catch((error) => console.error(error));
// }
"use strict";

var testCount = function testCount() {
  // счетчик попыток
  var count = Number(localStorage.getItem('count = 0')); //('count')) || 0;
  // console.log("count_= " + count);

  count++;
  localStorage.setItem('count', count); // console.log("count= " + localStorage.getItem('count'));
};

var doDelete = function doDelete() {
  // сброс счетчика тестов
  // localStorage.removeItem('count');
  localStorage.setItem('count', 0);
  console.log("count= " + localStorage.getItem('count'));
};

function randomArr(arr) {
  // перемещать мессив
  arr.sort(function () {
    return Math.random() - 0.5;
  });
}

function randomObj(obj) {
  // shuffle// перемещать объект
  var newObj = {};
  var keys = Object.keys(obj);
  keys.sort(function (a, b) {
    return Math.random() - 0.5;
  });
  keys.forEach(function (x) {
    newObj[x] = obj[x];
  });
  return newObj;
}

function randomInteger(min, max) {
  // получить случайное число от (min-0.5) до (max+0.5)
  var rand = min - 0.5 + Math.random() * (max - min + 1);
  return Math.round(rand);
}

function getTime() {
  var Data = new Date();
  var Year = Data.getFullYear();
  var Month = Data.getMonth();
  var Day = Data.getDate();
  var Hour = Data.getHours();
  var Minutes = Data.getMinutes();
  var Seconds = Data.getSeconds(); // Вывод

  console.log("".concat(Day, " - ").concat(Hour, ":").concat(Minutes, ":").concat(Seconds));
  var now = new Date().toLocaleTimeString();
  var utc = new Date().toJSON().slice(0, 10).replace(/-/g, '/'); // console.log("utc " + utc + "__" + now);
  // document.write(Year);
  // document.write(Month);
  // document.write(Day);
  // document.write(Hour);
  // document.write(Minutes);
  // document.write(Seconds);
}